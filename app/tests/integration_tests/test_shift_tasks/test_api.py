import pytest
from httpx import AsyncClient


# async def test_create_shift_tasks(ac: AsyncClient):
#
#     response = await ac.post(
#         "/api/v1/shift_tasks/",
#         json=[
#             {
#                 "СтатусЗакрытия": False,
#                 "ПредставлениеЗаданияНаСмену": "Задание на смену 2345",
#                 "Линия": "Т2",
#                 "Смена": "1",
#                 "Бригада": "Бригада №4",
#                 "НомерПартии": 22222,
#                 "ДатаПартии": "2024-01-30",
#                 "Номенклатура": "Какая то номенклатура",
#                 "КодЕКН": "456678",
#                 "ИдентификаторРЦ": "A",
#                 "ДатаВремяНачалаСмены": "2024-01-30T20:00:00+05:00",
#                 "ДатаВремяОкончанияСмены": "2024-01-31T08:00:00+05:00",
#             },
#             {
#                 "СтатусЗакрытия": False,
#                 "ПредставлениеЗаданияНаСмену": "Задание на смену 3",
#                 "Линия": "Т3",
#                 "Смена": "2",
#                 "Бригада": "Бригада №2",
#                 "НомерПартии": 22223,
#                 "ДатаПартии": "2024-03-30",
#                 "Номенклатура": "Какая то номенклатур3",
#                 "КодЕКН": "456673",
#                 "ИдентификаторРЦ": "Б",
#                 "ДатаВремяНачалаСмены": "2024-03-30T20:00:00+05:00",
#                 "ДатаВремяОкончанияСмены": "2024-03-31T08:00:00+05:00",
#             },
#             {
#                 "СтатусЗакрытия": True,
#                 "ПредставлениеЗаданияНаСмену": "Задание на смену 99",
#                 "Линия": "Т99",
#                 "Смена": "10",
#                 "Бригада": "Бригада №22",
#                 "НомерПартии": 22227,
#                 "ДатаПартии": "2024-05-30",
#                 "Номенклатура": "Какая то номенклатур5",
#                 "КодЕКН": "456679",
#                 "ИдентификаторРЦ": "Пп",
#                 "ДатаВремяНачалаСмены": "2024-05-30T20:00:00+05:00",
#                 "ДатаВремяОкончанияСмены": "2024-05-31T08:00:00+05:00",
#             },
#         ],
#     )
#
#     assert response.status_code == 201


# async def test_create_unique_codes(ac: AsyncClient):
#
#     response = await ac.post(
#         "/api/v1/codes/",
#         json=[
#             {
#                 "УникальныйКодПродукта": "12gRV60MMsn1",
#                 "НомерПартии": 22222,
#                 "ДатаПартии": "2024-01-30",
#             },
#             {
#                 "УникальныйКодПродукта": "12gRV60MMsn2",
#                 "НомерПартии": 22223,
#                 "ДатаПартии": "2024-03-30",
#             },
#         ],
#     )
#
#     assert response.status_code == 201


import asyncio
from app.main import app as fastapi_app
import pytest
from httpx import AsyncClient


@pytest.fixture(scope="function")
async def ac():  # Используем явный параметр event_loop
    async with AsyncClient(app=fastapi_app, base_url="http://test") as client:
        yield client


@pytest.mark.asyncio
async def test_create_shift_tasks(ac: AsyncClient):
    tasks_data = [
        {
            "СтатусЗакрытия": False,
            "ПредставлениеЗаданияНаСмену": "Задание на смену 2345",
            "Линия": "Т2",
            "Смена": "1",
            "Бригада": "Бригада №4",
            "НомерПартии": 22222,
            "ДатаПартии": "2024-01-30",
            "Номенклатура": "Какая то номенклатура",
            "КодЕКН": "456678",
            "ИдентификаторРЦ": "A",
            "ДатаВремяНачалаСмены": "2024-01-30T20:00:00+05:00",
            "ДатаВремяОкончанияСмены": "2024-01-31T08:00:00+05:00",
        },
        {
            "СтатусЗакрытия": False,
            "ПредставлениеЗаданияНаСмену": "Задание на смену 3",
            "Линия": "Т3",
            "Смена": "2",
            "Бригада": "Бригада №2",
            "НомерПартии": 22223,
            "ДатаПартии": "2024-03-30",
            "Номенклатура": "Какая то номенклатур3",
            "КодЕКН": "456673",
            "ИдентификаторРЦ": "Б",
            "ДатаВремяНачалаСмены": "2024-03-30T20:00:00+05:00",
            "ДатаВремяОкончанияСмены": "2024-03-31T08:00:00+05:00",
        },
        {
            "СтатусЗакрытия": True,
            "ПредставлениеЗаданияНаСмену": "Задание на смену 99",
            "Линия": "Т99",
            "Смена": "10",
            "Бригада": "Бригада №22",
            "НомерПартии": 22227,
            "ДатаПартии": "2024-05-30",
            "Номенклатура": "Какая то номенклатур5",
            "КодЕКН": "456679",
            "ИдентификаторРЦ": "Пп",
            "ДатаВремяНачалаСмены": "2024-05-30T20:00:00+05:00",
            "ДатаВремяОкончанияСмены": "2024-05-31T08:00:00+05:00",
        },
    ]

    response = await ac.post("/api/v1/shift_tasks/", json=tasks_data)

    assert response.status_code == 201


@pytest.mark.asyncio
async def test_create_unique_codes(ac: AsyncClient):
    codes_data = [
        {
            "УникальныйКодПродукта": "12gRV60MMsn1",
            "НомерПартии": 22222,
            "ДатаПартии": "2024-01-30",
        },
        {
            "УникальныйКодПродукта": "12gRV60MMsn2",
            "НомерПартии": 22223,
            "ДатаПартии": "2024-03-30",
        },
    ]

    response = await ac.post("/api/v1/codes/", json=codes_data)

    assert response.status_code == 201
